#Exo 1: Affichage de la table de verité et de la forme canonique d'une fonction logique

#ALGORITHME

Algorithme TableDeVeriteEtFormesCanoniques
    Variables:
        num_variables: entier
        fonction_logique: chaîne de caractères
        table_verite: tableau de tuples (liste d'entrées, sortie)
        forme_canonique_1, forme_canonique_2: chaînes de caractères
    
    Début
        // Demander à l'utilisateur le nombre de variables
        Afficher "Entrez le nombre de variables dans la fonction logique : "
        Lire num_variables
        
        // Demander à l'utilisateur la fonction logique
        Afficher "Entrez la fonction logique en utilisant la syntaxe Python (par exemple, 'a and b or not a') : "
        Lire fonction_logique
        
        // Générer la fonction logique dynamiquement
        fonction_logique := evaluer("lambda " + concaténer([chr(97 + i) pour i de 0 à num_variables - 1]) + ": " + fonction_logique)
        
        // Générer la table de vérité
        table_verite := GénérerTableDeVerite(fonction_logique, num_variables)
        
        // Afficher la table de vérité
        Afficher "Table de vérité :"
        AfficherEnTête(num_variables)
        Pour chaque entrées, sortie dans table_verite Faire
            AfficherLigne(entrées, sortie)
        
        // Générer les formes canoniques
        forme_canonique_1 := PremièreFormeCanonique(table_verite)
        forme_canonique_2 := DeuxièmeFormeCanonique(table_verite)
        
        // Afficher les formes canoniques
        Afficher "Première Forme Canonique :"
        Afficher forme_canonique_1
        Afficher "Deuxième Forme Canonique :"
        Afficher forme_canonique_2
    Fin

    Fonction GénérerTableDeVerite(fonction_logique, num_variables)
        Variables:
            table_verite: tableau de tuples (liste d'entrées, sortie)
            i: entier
        
        Début
            table_verite := tableau vide
            Pour i de 0 à 2^num_variables - 1 Faire
                entrées := [((i >> j) & 1) pour j de num_variables - 1 à 0]
                sortie := fonction_logique(entrées[0], entrées[1], ..., entrées[num_variables - 1])
                Ajouter (entrées, sortie) à table_verite
            Retourner table_verite
        Fin

    Fonction PremièreFormeCanonique(table_verite)
        Variables:
            termes_1: tableau de chaînes de caractères
        
        Début
            termes_1 := tableau vide
            Pour chaque entrées, sortie dans table_verite Faire
                Si sortie == 1 Alors
                    terme := construireTerme(entrées)
                    Ajouter terme à termes_1
            Retourner concaténer(termes_1, " OR ")
        Fin

    Fonction DeuxièmeFormeCanonique(table_verite)
        Variables:
            termes_0: tableau de chaînes de caractères
        
        Début
            termes_0 := tableau vide
            Pour chaque entrées, sortie dans table_verite Faire
                Si sortie == 0 Alors
                    terme := construireTerme(entrées)
                    Ajouter terme à termes_0
            Retourner concaténer(termes_0, " AND ")
        Fin

    Fonction construireTerme(entrées)
        Variables:
            terme: chaîne de caractères
        
        Début
            terme := ""
            Pour chaque index, valeur dans entrées Faire
                Si valeur == 1 Alors
                    Ajouter (index + 97) à terme
                Sinon
                    Ajouter ("¬" + (index + 97)) à terme
                Si index < longueur(entrées) - 1 Alors
                    Ajouter " ∧ " à terme
            Retourner terme
        Fin
Fin
