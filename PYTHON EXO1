#Exo 1: Affichage de la table de verité et de la forme canonique d'une fonction logique

#PYTHON

def get_truth_table(boolean_function, num_variables):
    truth_table_result = []

    for i in range(2 ** num_variables):
        inputs = [(i >> j) & 1 for j in range(num_variables)][::-1]  # Binary representation of row number
        output = boolean_function(*inputs)
        truth_table_result.append((inputs, output))

    return truth_table_result

def first_canonical_form(truth_table):
    terms_1 = []

    for inputs, output in truth_table:
        if output:
            term = []
            for i, value in enumerate(inputs):
                if value:
                    term.append(chr(97 + i))
                else:
                    term.append("(¬" + chr(97 + i) + ")")
            terms_1.append(" ∧ ".join(term))

    return " OR ".join(terms_1)

def second_canonical_form(truth_table):
    terms_0 = []

    for inputs, output in truth_table:
        if not output:
            term = []
            for i, value in enumerate(inputs):
                if not value:
                    term.append(chr(97 + i))
                else:
                    term.append("(¬" + chr(97 + i) + ")")
            terms_0.append(" OR ".join(term))

    return " AND ".join(terms_0)

def main():
    num_variables = int(input("Enter the number of variables in the logical function: "))
    boolean_function_str = input("Enter the logical function using Python syntax (e.g., 'a and b or not a'): ")

    # Dynamically create the boolean function
    boolean_function = eval("lambda " + ", ".join([chr(97 + i) for i in range(num_variables)]) + ": " + boolean_function_str)

    # Generate truth table
    truth_table_result = get_truth_table(boolean_function, num_variables)

    # Display truth table
    print("\nTruth table:")
    print(" | ".join([chr(97 + i) for i in range(num_variables)] + ["Output"]))
    print("-" * (num_variables * 3 + 7))

    for inputs, output in truth_table_result:
        print(" | ".join([str(input_val) for input_val in inputs] + [str(output)]))

    # Display first canonical form
    print("\nFirst Canonical Form:")
    print(first_canonical_form(truth_table_result))

    # Display second canonical form
    print("\nSecond Canonical Form:")
    print(second_canonical_form(truth_table_result))

if __name__ == "__main__":
    main()

