#Exo 1: Affichage de la table de verité et de la forme canonique d'une fonction logique

#Posons F(A,B,C)=(A.B)+((¬C)+(¬D))

ALGORITHME

 #Affichage de la table de verité de la fonctionF
 
Algorithme TableDeVeriteF
    Fonction calcul_F(A, B, C, D)
        retourner (A ET B) OU (NON C ET NON D)
    Fin

    Afficher "A   B   C   D   F(A,B,C)"
    
    Pour chaque valeur de A de Vrai à Faux
        Pour chaque valeur de B de Vrai à Faux
            Pour chaque valeur de C de Vrai à Faux
                Pour chaque valeur de D de Vrai à Faux
                    resultat_F <- calcul_F(A, B, C, D)
                    AFFICHER A, " ", B, " ", C, " ", D, " ", resultat_F
                Fin pour
            Fin pour
        Fin pour
    Fin pour
Fin algorithme

 #Affichage de la première et deuxième forme canonique de la fonctionF
Lire les variables booléennes A, B, C, D
Calculer les termes de la fonction logique :
   F1 = (A AND B)
   F2 = (NOT C) AND (NOT D)
Afficher la première forme canonique :
   F = F1 OR F2
Afficher la deuxième forme canonique :
   F = (A + B)(NOT C + NOT D)
   
PYTHON

 #Affichage de la table de verité de la fonctionF
 
# Définition de la fonction logique F
def calcul_F(A, B, C, D):
    return (A and B) or (not C and not D)

# Affichage de la table de vérité de la fonction F
print("A   B   C   D   F(A,B,C)")
for A in [True, False]:
    for B in [True, False]:
        for C in [True, False]:
            for D in [True, False]:
                resultat_F = calcul_F(A, B, C, D)
                print(A, " ", B, " ", C, " ", D, " ", resultat_F)

# Affichage des formes canoniques de la fonction F
print("\nAffichage de la première et deuxième forme canonique de la fonction F")
print("F1 = (A AND B)")
print("F2 = (NOT C) AND (NOT D)")
print("Première forme canonique : F = F1 OR F2")
print("Deuxième forme canonique : F = (A + B)(NOT C + NOT D)")
